package scraper.dao;

import scraper.model.PetitionSignature;

import java.sql.*;
import java.util.*;
import java.math.*;


/**
 * PetitionSignature Data Access Object (DAO).
 * This class contains all database handling that is needed to
 * permanently store and retrieve PetitionSignature object instances.
 */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */



public class PetitionSignatureDao {


    public PetitionSignature createValueObject() {
        return new PetitionSignature();
    }


    public PetitionSignature getObject(Connection conn, int id) throws NotFoundException, SQLException {

        PetitionSignature valueObject = createValueObject();
        valueObject.setId(id);
        load(conn, valueObject);
        return valueObject;
    }


    public void load(Connection conn, PetitionSignature valueObject) throws NotFoundException, SQLException {

        String sql = "SELECT * FROM petition_signature WHERE (id = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, valueObject.getId());

            singleQuery(conn, stmt, valueObject);

        } finally {
            if (stmt != null)
                stmt.close();
        }
    }


    public List loadAll(Connection conn) throws SQLException {

        String sql = "SELECT * FROM petition_signature ORDER BY id ASC ";
        List searchResults = listQuery(conn, conn.prepareStatement(sql));

        return searchResults;
    }


    public synchronized void create(Connection conn, PetitionSignature valueObject) throws SQLException {

        String sql = "";
        PreparedStatement stmt = null;
        ResultSet result = null;

        try {
            sql = "INSERT INTO petition_signature ( name, comment, city, "
                    + "signDate, petitionId) VALUES (?, ?, ?, ?, ?) ";
            stmt = conn.prepareStatement(sql);

            stmt.setString(1, valueObject.getName());
            stmt.setString(2, valueObject.getComment());
            stmt.setString(3, valueObject.getCity());
            stmt.setTimestamp(4, valueObject.getSignDate());
            stmt.setInt(5, valueObject.getPetitionId());

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount != 1) {
                //System.out.println("PrimaryKey Error when updating DB!");
                throw new SQLException("PrimaryKey Error when updating DB!");
            }

        } finally {
            if (stmt != null)
                stmt.close();
        }


        /**
         * The following query will read the automatically generated primary key
         * back to valueObject. This must be done to make things consistent for
         * upper layer processing logic.
         */
        sql = "SELECT last_insert_id()";

        try {
            stmt = conn.prepareStatement(sql);
            result = stmt.executeQuery();

            if (result.next()) {

                valueObject.setId((int)result.getLong(1));

            } else {
                //System.out.println("Unable to find primary-key for created object!");
                throw new SQLException("Unable to find primary-key for created object!");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }

    }


    public void save(Connection conn, PetitionSignature valueObject)
            throws NotFoundException, SQLException {

        String sql = "UPDATE petition_signature SET name = ?, comment = ?, city = ?, "
                + "signDate = ?, petitionId = ? WHERE (id = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, valueObject.getName());
            stmt.setString(2, valueObject.getComment());
            stmt.setString(3, valueObject.getCity());
            stmt.setTimestamp(4, valueObject.getSignDate());
            stmt.setInt(5, valueObject.getPetitionId());

            stmt.setInt(6, valueObject.getId());

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be saved! (PrimaryKey not found)");
                throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }


    public void delete(Connection conn, PetitionSignature valueObject)
            throws NotFoundException, SQLException {

        String sql = "DELETE FROM petition_signature WHERE (id = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, valueObject.getId());

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be deleted (PrimaryKey not found)");
                throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }

    public void deleteAll(Connection conn) throws SQLException {

        String sql = "DELETE FROM petition_signature";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            int rowcount = databaseUpdate(conn, stmt);
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }


    public int countAll(Connection conn) throws SQLException {

        String sql = "SELECT count(*) FROM petition_signature";
        PreparedStatement stmt = null;
        ResultSet result = null;
        int allRows = 0;

        try {
            stmt = conn.prepareStatement(sql);
            result = stmt.executeQuery();

            if (result.next())
                allRows = result.getInt(1);
        } finally {
            if (stmt != null)
                stmt.close();
        }
        return allRows;
    }


    public List searchMatching(Connection conn, PetitionSignature valueObject) throws SQLException {

        List searchResults;

        boolean first = true;
        StringBuffer sql = new StringBuffer("SELECT * FROM petition_signature WHERE 1=1 ");

        if (valueObject.getId() != 0) {
            if (first) { first = false; }
            sql.append("AND id = ").append(valueObject.getId()).append(" ");
        }

        if (valueObject.getName() != null) {
            if (first) { first = false; }
            sql.append("AND name LIKE '").append(valueObject.getName()).append("%' ");
        }

        if (valueObject.getComment() != null) {
            if (first) { first = false; }
            sql.append("AND comment LIKE '").append(valueObject.getComment()).append("%' ");
        }

        if (valueObject.getCity() != null) {
            if (first) { first = false; }
            sql.append("AND city LIKE '").append(valueObject.getCity()).append("%' ");
        }

        if (valueObject.getSignDate() != null) {
            if (first) { first = false; }
            sql.append("AND signDate = '").append(valueObject.getSignDate()).append("' ");
        }

        if (valueObject.getPetitionId() != 0) {
            if (first) { first = false; }
            sql.append("AND petitionId = ").append(valueObject.getPetitionId()).append(" ");
        }


        sql.append("ORDER BY id ASC ");

        // Prevent accidential full table results.
        // Use loadAll if all rows must be returned.
        if (first)
            searchResults = new ArrayList();
        else
            searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

        return searchResults;
    }

    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

        int result = stmt.executeUpdate();

        return result;
    }


    protected void singleQuery(Connection conn, PreparedStatement stmt, PetitionSignature valueObject)
            throws NotFoundException, SQLException {

        ResultSet result = null;

        try {
            result = stmt.executeQuery();

            if (result.next()) {

                valueObject.setId(result.getInt("id"));
                valueObject.setName(result.getString("name"));
                valueObject.setComment(result.getString("comment"));
                valueObject.setCity(result.getString("city"));
                valueObject.setSignDate(result.getTimestamp("signDate"));
                valueObject.setPetitionId(result.getInt("petitionId"));

            } else {
                //System.out.println("PetitionSignature Object Not Found!");
                throw new NotFoundException("PetitionSignature Object Not Found!");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }


    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

        ArrayList searchResults = new ArrayList();
        ResultSet result = null;

        try {
            result = stmt.executeQuery();

            while (result.next()) {
                PetitionSignature temp = createValueObject();

                temp.setId(result.getInt("id"));
                temp.setName(result.getString("name"));
                temp.setComment(result.getString("comment"));
                temp.setCity(result.getString("city"));
                temp.setSignDate(result.getTimestamp("signDate"));
                temp.setPetitionId(result.getInt("petitionId"));

                searchResults.add(temp);
            }

        } finally {
            if (stmt != null)
                stmt.close();
        }

        return (List)searchResults;
    }


}